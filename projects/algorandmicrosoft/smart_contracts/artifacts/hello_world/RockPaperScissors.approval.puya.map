{
  "version": 3,
  "sources": [
    "C:/Users/PARAS/algorandmicrosoft/projects/algorandmicrosoft/smart_contracts/hello_world/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAIwC;AAAoB;AAA1D;AACsC;AAAoB;AAA1D;AAHF;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;;AAKE;;AAAA;AAAA;AAAA;;AAAA;AALF;;;AAAA;AAAA;;;AAAA;AAKE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AALF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAKE;;;AAHsC;AAIpC;;AAAA;AAHoC;AAIpC;;AAAA;AAEI;;AAAA;;AAAA;AAAJ;;;AAAsB;;;;;;AAAP;AACV;;AAAA;;;AAAY;;AAAO;AAAP;AAAZ;;;AAA0B;;AAAO;AAAP;AAAA;;;AAAA;;AAAA;;;AAA0B;;AAAO;AAAP;AAAA;;;AAAY;;AAAO;AAAP;AAAZ;;;AAA8B;;;;;;;;;AAAP;AACzE;;;;;;;;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2"
    },
    "6": {
      "op": "bytecblock \"p1\" \"p2\""
    },
    "14": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "16": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "19": {
      "op": "bytec_0 // \"p1\"",
      "defined_out": [
        "\"p1\""
      ],
      "stack_out": [
        "\"p1\""
      ]
    },
    "20": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"p1\"",
        "0"
      ],
      "stack_out": [
        "\"p1\"",
        "0"
      ]
    },
    "21": {
      "op": "app_global_put",
      "stack_out": []
    },
    "22": {
      "op": "bytec_1 // \"p2\"",
      "defined_out": [
        "\"p2\""
      ],
      "stack_out": [
        "\"p2\""
      ]
    },
    "23": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"p2\"",
        "0"
      ]
    },
    "24": {
      "op": "app_global_put",
      "stack_out": []
    },
    "25": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "27": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "30": {
      "op": "pushbytes 0x91cb3c42 // method \"setChoices(uint64,uint64)string\"",
      "defined_out": [
        "Method(setChoices(uint64,uint64)string)"
      ],
      "stack_out": [
        "Method(setChoices(uint64,uint64)string)"
      ]
    },
    "36": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(setChoices(uint64,uint64)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(setChoices(uint64,uint64)string)",
        "tmp%2#0"
      ]
    },
    "39": {
      "op": "match main_setChoices_route@5",
      "stack_out": []
    },
    "43": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "44": {
      "op": "return",
      "stack_out": []
    },
    "45": {
      "block": "main_setChoices_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "47": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "48": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "49": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "51": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "52": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "55": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "56": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "59": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "60": {
      "callsub": "smart_contracts/hello_world/contract.algo.ts::RockPaperScissors.setChoices",
      "op": "callsub setChoices",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "63": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "64": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "65": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "66": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "69": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "70": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "71": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "77": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "78": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "79": {
      "op": "log",
      "stack_out": []
    },
    "80": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "81": {
      "op": "return",
      "stack_out": []
    },
    "82": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "84": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "87": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "89": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "90": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "91": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "92": {
      "op": "return",
      "stack_out": []
    },
    "93": {
      "subroutine": "smart_contracts/hello_world/contract.algo.ts::RockPaperScissors.setChoices",
      "params": {
        "p1#0": "uint64",
        "p2#0": "uint64"
      },
      "block": "setChoices",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "96": {
      "op": "bytec_0 // \"p1\"",
      "defined_out": [
        "\"p1\""
      ],
      "stack_out": [
        "\"p1\""
      ]
    },
    "97": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"p1\"",
        "p1#0 (copy)"
      ],
      "stack_out": [
        "\"p1\"",
        "p1#0 (copy)"
      ]
    },
    "99": {
      "op": "app_global_put",
      "stack_out": []
    },
    "100": {
      "op": "bytec_1 // \"p2\"",
      "defined_out": [
        "\"p2\""
      ],
      "stack_out": [
        "\"p2\""
      ]
    },
    "101": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"p2\"",
        "p2#0 (copy)"
      ],
      "stack_out": [
        "\"p2\"",
        "p2#0 (copy)"
      ]
    },
    "103": {
      "op": "app_global_put",
      "stack_out": []
    },
    "104": {
      "op": "frame_dig -2",
      "stack_out": [
        "p1#0 (copy)"
      ]
    },
    "106": {
      "op": "frame_dig -1",
      "stack_out": [
        "p1#0 (copy)",
        "p2#0 (copy)"
      ]
    },
    "108": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "109": {
      "op": "bz setChoices_after_if_else@2",
      "stack_out": []
    },
    "112": {
      "op": "pushbytes \"draw\"",
      "defined_out": [
        "\"draw\""
      ],
      "stack_out": [
        "\"draw\""
      ]
    },
    "118": {
      "retsub": true,
      "op": "retsub"
    },
    "119": {
      "block": "setChoices_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "p1#0 (copy)"
      ],
      "stack_out": [
        "p1#0 (copy)"
      ]
    },
    "121": {
      "op": "bnz setChoices_or_contd@4",
      "stack_out": []
    },
    "124": {
      "op": "frame_dig -1",
      "defined_out": [
        "p2#0 (copy)"
      ],
      "stack_out": [
        "p2#0 (copy)"
      ]
    },
    "126": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "p2#0 (copy)"
      ],
      "stack_out": [
        "p2#0 (copy)",
        "2"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "128": {
      "op": "bnz setChoices_if_body@8",
      "stack_out": []
    },
    "131": {
      "block": "setChoices_or_contd@4",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "p1#0 (copy)"
      ],
      "stack_out": [
        "p1#0 (copy)"
      ]
    },
    "133": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "p1#0 (copy)"
      ],
      "stack_out": [
        "p1#0 (copy)",
        "1"
      ]
    },
    "134": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "135": {
      "op": "bz setChoices_or_contd@6",
      "stack_out": []
    },
    "138": {
      "op": "frame_dig -1",
      "defined_out": [
        "p2#0 (copy)"
      ],
      "stack_out": [
        "p2#0 (copy)"
      ]
    },
    "140": {
      "op": "bz setChoices_if_body@8",
      "stack_out": []
    },
    "143": {
      "block": "setChoices_or_contd@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "p1#0 (copy)"
      ],
      "stack_out": [
        "p1#0 (copy)"
      ]
    },
    "145": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "p1#0 (copy)"
      ],
      "stack_out": [
        "p1#0 (copy)",
        "2"
      ]
    },
    "146": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "147": {
      "op": "bz setChoices_after_if_else@9",
      "stack_out": []
    },
    "150": {
      "op": "frame_dig -1",
      "defined_out": [
        "p2#0 (copy)"
      ],
      "stack_out": [
        "p2#0 (copy)"
      ]
    },
    "152": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "p2#0 (copy)"
      ],
      "stack_out": [
        "p2#0 (copy)",
        "1"
      ]
    },
    "153": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "154": {
      "op": "bz setChoices_after_if_else@9",
      "stack_out": []
    },
    "157": {
      "block": "setChoices_if_body@8",
      "stack_in": [],
      "op": "pushbytes \"p1 wins\"",
      "defined_out": [
        "\"p1 wins\""
      ],
      "stack_out": [
        "\"p1 wins\""
      ]
    },
    "166": {
      "retsub": true,
      "op": "retsub"
    },
    "167": {
      "block": "setChoices_after_if_else@9",
      "stack_in": [],
      "op": "pushbytes \"p2 wins\"",
      "defined_out": [
        "\"p2 wins\""
      ],
      "stack_out": [
        "\"p2 wins\""
      ]
    },
    "176": {
      "retsub": true,
      "op": "retsub"
    }
  }
}