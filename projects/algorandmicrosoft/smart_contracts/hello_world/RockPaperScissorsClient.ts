/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"RockPaperScissors","structs":{},"methods":[{"name":"setChoices","args":[{"type":"uint64","name":"p1"},{"type":"uint64","name":"p2"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"p1Choice":{"keyType":"AVMString","valueType":"AVMUint64","key":"cDE="},"p2Choice":{"keyType":"AVMString","valueType":"AVMUint64","key":"cDI="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[48],"errorMessage":"OnCompletion is not NoOp"},{"pc":[90],"errorMessage":"can only call when creating"},{"pc":[51],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDIKICAgIGJ5dGVjYmxvY2sgInAxIiAicDIiCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo1CiAgICAvLyBwMUNob2ljZSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICJwMSIsIGluaXRpYWxWYWx1ZTogMCB9KQogICAgYnl0ZWNfMCAvLyAicDEiCiAgICBpbnRjXzEgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjYKICAgIC8vIHAyQ2hvaWNlID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogInAyIiwgaW5pdGlhbFZhbHVlOiAwIH0pCiAgICBieXRlY18xIC8vICJwMiIKICAgIGludGNfMSAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czozCiAgICAvLyBleHBvcnQgY2xhc3MgUm9ja1BhcGVyU2Npc3NvcnMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAOAogICAgcHVzaGJ5dGVzIDB4OTFjYjNjNDIgLy8gbWV0aG9kICJzZXRDaG9pY2VzKHVpbnQ2NCx1aW50NjQpc3RyaW5nIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9zZXRDaG9pY2VzX3JvdXRlQDUKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjMKICAgIC8vIGV4cG9ydCBjbGFzcyBSb2NrUGFwZXJTY2lzc29ycyBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMSAvLyAwCiAgICByZXR1cm4KCm1haW5fc2V0Q2hvaWNlc19yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gc2V0Q2hvaWNlcyhwMTogdWludDY0LCBwMjogdWludDY0KTogc3RyaW5nIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MwogICAgLy8gZXhwb3J0IGNsYXNzIFJvY2tQYXBlclNjaXNzb3JzIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6OAogICAgLy8gc2V0Q2hvaWNlcyhwMTogdWludDY0LCBwMjogdWludDY0KTogc3RyaW5nIHsKICAgIGNhbGxzdWIgc2V0Q2hvaWNlcwogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjMKICAgIC8vIGV4cG9ydCBjbGFzcyBSb2NrUGFwZXJTY2lzc29ycyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTIKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6OlJvY2tQYXBlclNjaXNzb3JzLnNldENob2ljZXMocDE6IHVpbnQ2NCwgcDI6IHVpbnQ2NCkgLT4gYnl0ZXM6CnNldENob2ljZXM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBzZXRDaG9pY2VzKHAxOiB1aW50NjQsIHAyOiB1aW50NjQpOiBzdHJpbmcgewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo1CiAgICAvLyBwMUNob2ljZSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICJwMSIsIGluaXRpYWxWYWx1ZTogMCB9KQogICAgYnl0ZWNfMCAvLyAicDEiCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo5CiAgICAvLyB0aGlzLnAxQ2hvaWNlLnZhbHVlID0gcDEKICAgIGZyYW1lX2RpZyAtMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjYKICAgIC8vIHAyQ2hvaWNlID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogInAyIiwgaW5pdGlhbFZhbHVlOiAwIH0pCiAgICBieXRlY18xIC8vICJwMiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjEwCiAgICAvLyB0aGlzLnAyQ2hvaWNlLnZhbHVlID0gcDIKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjEyCiAgICAvLyBpZiAocDEgPT09IHAyKSByZXR1cm4gImRyYXciCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIGJ6IHNldENob2ljZXNfYWZ0ZXJfaWZfZWxzZUAyCiAgICBwdXNoYnl0ZXMgImRyYXciCiAgICByZXRzdWIKCnNldENob2ljZXNfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MTMKICAgIC8vIGlmICgocDEgPT09IDAgJiYgcDIgPT09IDIpIHx8IChwMSA9PT0gMSAmJiBwMiA9PT0gMCkgfHwgKHAxID09PSAyICYmIHAyID09PSAxKSkgcmV0dXJuICJwMSB3aW5zIgogICAgZnJhbWVfZGlnIC0yCiAgICBibnogc2V0Q2hvaWNlc19vcl9jb250ZEA0CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMiAvLyAyCiAgICA9PQogICAgYm56IHNldENob2ljZXNfaWZfYm9keUA4CgpzZXRDaG9pY2VzX29yX2NvbnRkQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxMwogICAgLy8gaWYgKChwMSA9PT0gMCAmJiBwMiA9PT0gMikgfHwgKHAxID09PSAxICYmIHAyID09PSAwKSB8fCAocDEgPT09IDIgJiYgcDIgPT09IDEpKSByZXR1cm4gInAxIHdpbnMiCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMCAvLyAxCiAgICA9PQogICAgYnogc2V0Q2hvaWNlc19vcl9jb250ZEA2CiAgICBmcmFtZV9kaWcgLTEKICAgIGJ6IHNldENob2ljZXNfaWZfYm9keUA4CgpzZXRDaG9pY2VzX29yX2NvbnRkQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxMwogICAgLy8gaWYgKChwMSA9PT0gMCAmJiBwMiA9PT0gMikgfHwgKHAxID09PSAxICYmIHAyID09PSAwKSB8fCAocDEgPT09IDIgJiYgcDIgPT09IDEpKSByZXR1cm4gInAxIHdpbnMiCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMiAvLyAyCiAgICA9PQogICAgYnogc2V0Q2hvaWNlc19hZnRlcl9pZl9lbHNlQDkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDEKICAgID09CiAgICBieiBzZXRDaG9pY2VzX2FmdGVyX2lmX2Vsc2VAOQoKc2V0Q2hvaWNlc19pZl9ib2R5QDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxMwogICAgLy8gaWYgKChwMSA9PT0gMCAmJiBwMiA9PT0gMikgfHwgKHAxID09PSAxICYmIHAyID09PSAwKSB8fCAocDEgPT09IDIgJiYgcDIgPT09IDEpKSByZXR1cm4gInAxIHdpbnMiCiAgICBwdXNoYnl0ZXMgInAxIHdpbnMiCiAgICByZXRzdWIKCnNldENob2ljZXNfYWZ0ZXJfaWZfZWxzZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MTQKICAgIC8vIHJldHVybiAicDIgd2lucyIKICAgIHB1c2hieXRlcyAicDIgd2lucyIKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAQACJgICcDECcDIxGEAABigjZykjZzEbQQA0gASRyzxCNhoAjgEAAiNDMRkURDEYRDYaARc2GgIXiAAeSRUWVwYCTFCABBUffHVMULAiQzEZQP/UMRgURCJDigIBKIv+ZymL/2eL/ov/EkEAB4AEZHJhd4mL/kAAB4v/JBJAABqL/iISQQAFi/9BAA6L/iQSQQARi/8iEkEACoAHcDEgd2luc4mAB3AyIHdpbnOJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the RockPaperScissors contract
 */
export type RockPaperScissorsArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'setChoices(uint64,uint64)string': {
      p1: bigint | number
      p2: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'setChoices(uint64,uint64)string': [p1: bigint | number, p2: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type RockPaperScissorsReturns = {
  'setChoices(uint64,uint64)string': string
}

/**
 * Defines the types of available calls and state of the RockPaperScissors smart contract.
 */
export type RockPaperScissorsTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'setChoices(uint64,uint64)string' | 'setChoices', {
      argsObj: RockPaperScissorsArgs['obj']['setChoices(uint64,uint64)string']
      argsTuple: RockPaperScissorsArgs['tuple']['setChoices(uint64,uint64)string']
      returns: RockPaperScissorsReturns['setChoices(uint64,uint64)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        p1Choice: bigint
        p2Choice: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type RockPaperScissorsSignatures = keyof RockPaperScissorsTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type RockPaperScissorsNonVoidMethodSignatures = keyof RockPaperScissorsTypes['methods'] extends infer T ? T extends keyof RockPaperScissorsTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the RockPaperScissors smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends RockPaperScissorsSignatures> = RockPaperScissorsTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the RockPaperScissors smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RockPaperScissorsSignatures> = RockPaperScissorsTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = RockPaperScissorsTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type RockPaperScissorsCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type RockPaperScissorsDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: RockPaperScissorsCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the RockPaperScissors smart contract
 */
export abstract class RockPaperScissorsParamsFactory {
  /**
   * Constructs a no op call for the setChoices(uint64,uint64)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setChoices(params: CallParams<RockPaperScissorsArgs['obj']['setChoices(uint64,uint64)string'] | RockPaperScissorsArgs['tuple']['setChoices(uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setChoices(uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.p1, params.args.p2],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the RockPaperScissors smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class RockPaperScissorsFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `RockPaperScissorsFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new RockPaperScissorsClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new RockPaperScissorsClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the RockPaperScissors smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: RockPaperScissorsDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new RockPaperScissorsClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RockPaperScissors smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RockPaperScissors smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RockPaperScissors smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new RockPaperScissorsClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the RockPaperScissors smart contract
 */
export class RockPaperScissorsClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `RockPaperScissorsClient`
   *
   * @param appClient An `AppClient` instance which has been created with the RockPaperScissors app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `RockPaperScissorsClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends RockPaperScissorsNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `RockPaperScissorsClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<RockPaperScissorsClient> {
    return new RockPaperScissorsClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `RockPaperScissorsClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<RockPaperScissorsClient> {
    return new RockPaperScissorsClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the RockPaperScissors smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the RockPaperScissors smart contract using the `setChoices(uint64,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setChoices: (params: CallParams<RockPaperScissorsArgs['obj']['setChoices(uint64,uint64)string'] | RockPaperScissorsArgs['tuple']['setChoices(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RockPaperScissorsParamsFactory.setChoices(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the RockPaperScissors smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the RockPaperScissors smart contract using the `setChoices(uint64,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setChoices: (params: CallParams<RockPaperScissorsArgs['obj']['setChoices(uint64,uint64)string'] | RockPaperScissorsArgs['tuple']['setChoices(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RockPaperScissorsParamsFactory.setChoices(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the RockPaperScissors smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the RockPaperScissors smart contract using the `setChoices(uint64,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setChoices: async (params: CallParams<RockPaperScissorsArgs['obj']['setChoices(uint64,uint64)string'] | RockPaperScissorsArgs['tuple']['setChoices(uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RockPaperScissorsParamsFactory.setChoices(params))
      return {...result, return: result.return as unknown as (undefined | RockPaperScissorsReturns['setChoices(uint64,uint64)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new RockPaperScissorsClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current RockPaperScissors app
   */
  state = {
    /**
     * Methods to access global state for the current RockPaperScissors app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          p1Choice: result.p1Choice,
          p2Choice: result.p2Choice,
        }
      },
      /**
       * Get the current value of the p1Choice key in global state
       */
      p1Choice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("p1Choice")) as bigint | undefined },
      /**
       * Get the current value of the p2Choice key in global state
       */
      p2Choice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("p2Choice")) as bigint | undefined },
    },
  }

  public newGroup(): RockPaperScissorsComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a setChoices(uint64,uint64)string method call against the RockPaperScissors contract
       */
      setChoices(params: CallParams<RockPaperScissorsArgs['obj']['setChoices(uint64,uint64)string'] | RockPaperScissorsArgs['tuple']['setChoices(uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setChoices(params)))
        resultMappers.push((v) => client.decodeReturnValue('setChoices(uint64,uint64)string', v))
        return this
      },
      /**
       * Add a clear state call to the RockPaperScissors contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as RockPaperScissorsComposer
  }
}
export type RockPaperScissorsComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setChoices(uint64,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setChoices(params?: CallParams<RockPaperScissorsArgs['obj']['setChoices(uint64,uint64)string'] | RockPaperScissorsArgs['tuple']['setChoices(uint64,uint64)string']>): RockPaperScissorsComposer<[...TReturns, RockPaperScissorsReturns['setChoices(uint64,uint64)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the RockPaperScissors smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): RockPaperScissorsComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): RockPaperScissorsComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<RockPaperScissorsComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<RockPaperScissorsComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<RockPaperScissorsComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<RockPaperScissorsComposerResults<TReturns>>
}
export type RockPaperScissorsComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

